{"ast":null,"code":"// AMM.js\nimport { createSlice } from '@reduxjs/toolkit';\nexport const amm = createSlice({\n  name: 'amm',\n  initialState: {\n    contracts: {\n      amm1: null,\n      amm2: null\n    },\n    selectedAmm: 'amm1',\n    // Default AMM selected\n    shares: 0,\n    swaps: [],\n    depositing: {\n      isDepositing: false,\n      isSuccess: false,\n      transactionHash: null\n    },\n    withdrawing: {\n      isWithdrawing: false,\n      isSuccess: false,\n      transactionHash: null\n    },\n    swapping: {\n      isSwapping: false,\n      isSuccess: false,\n      transactionHash: null\n    }\n  },\n  reducers: {\n    setContract: (state, action) => {\n      const {\n        ammNumber,\n        contract\n      } = action.payload;\n      state.contracts[ammNumber] = contract;\n    },\n    selectAmm: (state, action) => {\n      state.selectedAmm = action.payload;\n    },\n    sharesLoaded: (state, action) => {\n      state.shares = action.payload;\n    },\n    swapsLoaded: (state, action) => {\n      state.swaps = action.payload;\n    },\n    depositRequest: state => {\n      state.depositing.isDepositing = true;\n      state.depositing.isSuccess = false;\n      state.depositing.transactionHash = null;\n    },\n    depositSuccess: (state, action) => {\n      state.depositing.isDepositing = false;\n      state.depositing.isSuccess = true;\n      state.depositing.transactionHash = action.payload;\n    },\n    depositFail: state => {\n      state.depositing.isDepositing = false;\n      state.depositing.isSuccess = false;\n      state.depositing.transactionHash = null;\n    },\n    withdrawRequest: state => {\n      state.withdrawing.isWithdrawing = true;\n      state.withdrawing.isSuccess = false;\n      state.withdrawing.transactionHash = null;\n    },\n    withdrawSuccess: (state, action) => {\n      state.withdrawing.isWithdrawing = false;\n      state.withdrawing.isSuccess = true;\n      state.withdrawing.transactionHash = action.payload;\n    },\n    withdrawFail: state => {\n      state.withdrawing.isWithdrawing = false;\n      state.withdrawing.isSuccess = false;\n      state.withdrawing.transactionHash = null;\n    },\n    swapRequest: state => {\n      state.swapping.isSwapping = true;\n      state.swapping.isSuccess = false;\n      state.swapping.transactionHash = null;\n    },\n    swapSuccess: (state, action) => {\n      state.swapping.isSwapping = false;\n      state.swapping.isSuccess = true;\n      state.swapping.transactionHash = action.payload;\n    },\n    swapFail: state => {\n      state.swapping.isSwapping = false;\n      state.swapping.isSuccess = false;\n      state.swapping.transactionHash = null;\n    }\n  }\n});\nexport const {\n  setContract,\n  selectAmm,\n  sharesLoaded,\n  swapsLoaded,\n  depositRequest,\n  depositSuccess,\n  depositFail,\n  withdrawRequest,\n  withdrawSuccess,\n  withdrawFail,\n  swapRequest,\n  swapSuccess,\n  swapFail\n} = amm.actions;\nexport default amm.reducer;","map":{"version":3,"names":["createSlice","amm","name","initialState","contracts","amm1","amm2","selectedAmm","shares","swaps","depositing","isDepositing","isSuccess","transactionHash","withdrawing","isWithdrawing","swapping","isSwapping","reducers","setContract","state","action","ammNumber","contract","payload","selectAmm","sharesLoaded","swapsLoaded","depositRequest","depositSuccess","depositFail","withdrawRequest","withdrawSuccess","withdrawFail","swapRequest","swapSuccess","swapFail","actions","reducer"],"sources":["/Users/nicholasmakdessi/Desktop/Blockchain/Mentorship/capstone/aggregator/src/store/reducers/amm.js"],"sourcesContent":["// AMM.js\nimport { createSlice } from '@reduxjs/toolkit';\n\nexport const amm = createSlice({\n  name: 'amm',\n  initialState: {\n    contracts: {\n      amm1: null,\n      amm2: null\n    },\n    selectedAmm: 'amm1',  // Default AMM selected\n    shares: 0,\n    swaps: [],\n    depositing: {\n      isDepositing: false,\n      isSuccess: false,\n      transactionHash: null\n    },\n    withdrawing: {\n      isWithdrawing: false,\n      isSuccess: false,\n      transactionHash: null\n    },\n    swapping: {\n      isSwapping: false,\n      isSuccess: false,\n      transactionHash: null\n    }\n  },\n  reducers: {\n    setContract: (state, action) => {\n      const { ammNumber, contract } = action.payload;\n      state.contracts[ammNumber] = contract;\n    },\n    selectAmm: (state, action) => {\n      state.selectedAmm = action.payload;\n    },\n    sharesLoaded: (state, action) => {\n      state.shares = action.payload;\n    },\n    swapsLoaded: (state, action) => {\n      state.swaps = action.payload;\n    },\n    depositRequest: (state) => {\n      state.depositing.isDepositing = true;\n      state.depositing.isSuccess = false;\n      state.depositing.transactionHash = null;\n    },\n    depositSuccess: (state, action) => {\n      state.depositing.isDepositing = false;\n      state.depositing.isSuccess = true;\n      state.depositing.transactionHash = action.payload;\n    },\n    depositFail: (state) => {\n      state.depositing.isDepositing = false;\n      state.depositing.isSuccess = false;\n      state.depositing.transactionHash = null;\n    },\n    withdrawRequest: (state) => {\n      state.withdrawing.isWithdrawing = true;\n      state.withdrawing.isSuccess = false;\n      state.withdrawing.transactionHash = null;\n    },\n    withdrawSuccess: (state, action) => {\n      state.withdrawing.isWithdrawing = false;\n      state.withdrawing.isSuccess = true;\n      state.withdrawing.transactionHash = action.payload;\n    },\n    withdrawFail: (state) => {\n      state.withdrawing.isWithdrawing = false;\n      state.withdrawing.isSuccess = false;\n      state.withdrawing.transactionHash = null;\n    },\n    swapRequest: (state) => {\n      state.swapping.isSwapping = true;\n      state.swapping.isSuccess = false;\n      state.swapping.transactionHash = null;\n    },\n    swapSuccess: (state, action) => {\n      state.swapping.isSwapping = false;\n      state.swapping.isSuccess = true;\n      state.swapping.transactionHash = action.payload;\n    },\n    swapFail: (state) => {\n      state.swapping.isSwapping = false;\n      state.swapping.isSuccess = false;\n      state.swapping.transactionHash = null;\n    }\n  }\n});\n\nexport const {\n  setContract,\n  selectAmm,\n  sharesLoaded,\n  swapsLoaded,\n  depositRequest,\n  depositSuccess,\n  depositFail,\n  withdrawRequest,\n  withdrawSuccess,\n  withdrawFail,\n  swapRequest,\n  swapSuccess,\n  swapFail\n} = amm.actions;\n\nexport default amm.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}